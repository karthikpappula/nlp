import numpy as np
import nltk
from nltk.tokenize import word_tokenize
nltk.download('punkt')
nltk.download('punkt_tab')
import spacy
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences


nltk.download('punkt')
import spacy.cli
spacy.cli.download("en_core_web_sm")
nlp = spacy.load("en_core_web_sm")




tokens = word_tokenize(corpus.lower())
doc = nlp(corpus.lower())

lemmatized_tokens = [token.lemma_ for token in doc]
all_tokens = lemmatized_tokens

tokenizer = Tokenizer()
tokenizer.fit_on_texts([' '.join(all_tokens)])
total_words = len(tokenizer.word_index) + 1


input_sequences = []
for i in range(1, len(all_tokens)):
    n_gram_sequence = all_tokens[:i + 1]
    token_list = tokenizer.texts_to_sequences([' '.join(n_gram_sequence)])[0]
    input_sequences.append(token_list)


max_sequence_len = max(len(seq) for seq in input_sequences)
input_sequences = pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre')


X = input_sequences[:, :-1]
y = input_sequences[:, -1]


y = np.array(y)


model = Sequential()
model.add(Embedding(total_words, 100, input_length=max_sequence_len - 1))
model.add(LSTM(100))
model.add(Dense(total_words, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X, y, epochs=10, verbose=1)
